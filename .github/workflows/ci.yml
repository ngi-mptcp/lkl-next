name: CI
on:
  push:
    branches:
      - master
      - '**'
    tags:
      - 'milestone-*'
  pull_request:
    branches:
      - master
      - 'release/**'

jobs:
  #
  # Build/tests
  #
  integration:
    name: Integration test
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - displayTargetName: ubuntu-18.04
            os: unix
            runs_on: ubuntu-18.04
            shell: bash
          - displayTargetName: windows-2019
            os: windows
            runs_on: windows-2019
            shell: msys2 {0}
    timeout-minutes: 100
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      USE_CCACHE: 1
      working-directory: src/lkl-next

    defaults:
       run:
         shell: ${{ matrix.shell }}
#       working-directory: src/lkl-next

    steps:
      - name: Checkout
        if: runner.os == 'Linux'
        uses: actions/checkout@v2
        with:
          path: src/lkl-next

      - name: Set env
        shell: bash
        run: |
          echo "/usr/lib/ccache/bin:/usr/lib/ccache:/mingw64/bin:${{ github.workspace }}/bin" >> $GITHUB_PATH
          echo "export PATH=/usr/lib/ccache/bin:/usr/lib/ccache:/mingw64/bin:${{ github.workspace }}/bin:$PATH" >> $HOME/.bashrc

      - uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          msystem: MSYS
          path-type: minimal
          update: true
          install: >-
            base-devel
            gcc
            git
            bc
            python-pip
            dosfstools
            mingw-w64-x86_64-ccache

      - uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-build-${{ github.sha }}
          restore-keys: ${{ runner.os }}-ccache-build-

      - name: Partial Clone
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          REPO="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          BRANCH="${GITHUB_REF/#refs\/heads\//}"

          git init $GITHUB_WORKSPACE/src/lkl-next
          cd src/lkl-next
          git remote add origin $REPO
          git config core.sparseCheckout true
          echo -e '/*\n!*aux.*' >> .git/info/sparse-checkout
          git -c protocol.version=2 fetch --no-tags --prune --progress --depth=10 origin +${GITHUB_SHA}:refs/remotes/origin/${BRANCH}
          git checkout --progress --force -B $BRANCH refs/remotes/origin/$BRANCH

      - name: Install ccache on ubuntu-latest
        if: runner.os == 'Linux'
        run: |
          sudo apt update -y
          sudo apt install -y ccache

      - name: Install patched binutils for Windows
        working-directory: src/lkl-next
        if: runner.os == 'Windows'
        run: |
          cp -f tools/lkl/bin/*.exe /usr/bin/

      - name: Fix broken msys2 ccache
        working-directory: src/lkl-next
        if: runner.os == 'Windows'
        run: |
          mkdir -p /usr/lib/ccache/bin
          cd /usr/lib/ccache/bin
          echo -e '#!/bin/bash\n\nccache /usr/bin/cc "$@"' > cc
          echo -e '#!/bin/bash\n\nccache /usr/bin/gcc "$@"' > gcc
          echo -e '#!/bin/bash\n\nccache /usr/bin/cpp "$@"' > cpp
          export PATH=/usr/lib/ccache/bin:/usr/lib/ccache:/mingw64/bin:$PATH
          which gcc
          ccache -z

      - name: Install openvpn
        working-directory: src/lkl-next
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          curl -L -O https://swupdate.openvpn.org/community/releases/OpenVPN-2.5.3-I601-amd64.msi
          cmd.exe /c "start /wait msiexec /i OpenVPN-2.5.3-I601-amd64.msi ADDLOCAL=OpenVPN,Drivers.TAPWindows6,Drivers /qn /l*v c:\\msilog.txt"
          cat c:\\msilog.txt
          #curl -L -O https://1.as.dl.wireshark.org/win64/Wireshark-win64-3.4.8.exe
          #Wireshark-win64-3.4.8.exe /NCRC /S /desktopicon=yes /quicklaunchicon=no


      - name: pkg dependency
        run: |
          pip install yamlish junit_xml

#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3

      - name: clean
        working-directory: src/lkl-next
        run: |
          export PATH=/usr/lib/ccache/bin:/usr/lib/ccache:/mingw64/bin:$PATH
          cd tools/lkl && make clean-conf
          rm -rf ./junit

      - name: build
        working-directory: src/lkl-next
        run: |
          export PATH=/usr/lib/ccache/bin:/usr/lib/ccache:/mingw64/bin:$PATH
          cd tools/lkl && make -j3 ${MKARG}
          mkdir -p ~/destdir && make DESTDIR=~/destdir

      - name: packet capture on
        working-directory: src/lkl-next
        if: runner.os == 'Windows'
        run: |
          pktmon list
          pktmon start --capture --comp 1

      - name: run tests
        working-directory: src/lkl-next
        run: |
          export PATH=/usr/lib/ccache/bin:/usr/lib/ccache:/mingw64/bin:$PATH
          mkdir -p ./junit
          make -C tools/lkl run-tests tests="--junit-dir ../../junit"
          find ./tools/lkl/ -type f -name "*.xml" -exec mv {} ./junit/ \;

      - name: headers compress
        if: runner.os == 'Windows'
        working-directory: src/lkl-next
        run: |
          cd tools/lkl && powershell compress-archive include include.zip && cd ../..

      - name: packet capture off
        working-directory: src/lkl-next
        if: runner.os == 'Windows'
        run: |
          pktmon stop
          pktmon etl2pcap PktMon.etl
          cp PktMon.pcapng ./junit/
 
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3

      - name: check mptcp-enabled
        working-directory: src/lkl-next
        run: |
          echo "### on ${{ matrix.runs_on }}" > ${{ github.workflow }}-${{ matrix.runs_on }}-dmesg.txt
          ./tools/lkl/tests/boot |grep -i mptcp -A2 -B2 | tee -a ${{ github.workflow }}-${{ matrix.runs_on }}-dmesg.txt
          DMESG=$(./tools/lkl/tests/boot | grep -E "\[" | sed -z "s/\\n/\\\\n/g")
          JSON=$(cat << EOF
          [
              {
                    "file": "dmesg.out",
                    "line": 1,
                    "title": "title for my annotation",
                    "message": "$DMESG",
                    "annotation_level": "notice"
              }
          ]
          EOF
          )
          echo $JSON > ./annotations.json
          cat ./annotations.json

      - name: Archive test resuls xml
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ matrix.runs_on }}
          path: ${{ github.workspace }}/${{env.working-directory}}/junit/

      - name: headers
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{env.working-directory}}/tools/lkl/include.zip

      - name: ccache stat
        run: |
          export PATH=/usr/lib/ccache/bin:/usr/lib/ccache:/mingw64/bin:$PATH
          ccache --show-stats

      - name: Annotate
        uses: yuzutech/annotations-action@v0.3.0
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          input: "${{env.working-directory}}/annotations.json"
          title: "dmesg (${{ matrix.runs_on }})"

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: ${{env.working-directory}}/${{ github.workflow }}-${{ matrix.runs_on }}-dmesg.txt
          files: ${{env.working-directory}}/${{ github.workflow }}-${{ matrix.runs_on }}-dmesg.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release (extra)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && runner.os == 'Windows'
        with:
          files: |
            ${{ github.workspace }}/${{env.working-directory}}/junit/PktMon.pcapng
            ${{ github.workspace }}/${{env.working-directory}}/tools/lkl/liblkl.a
            ${{ github.workspace }}/${{env.working-directory}}/tools/lkl/include.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
